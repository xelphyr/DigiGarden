/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PythonScripterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var path = __toESM(require("path"));
var fs = __toESM(require("fs"));
var import_child_process = require("child_process");
var DEFAULT_SETTINGS = {
  pythonPath: "",
  pythonExe: "",
  pythonIndividualExes: {},
  passVaultPath: {},
  passCurrentFile: {},
  additionalArgs: {}
  // useLastFile: false
};
var PythonScripterPlugin = class extends import_obsidian.Plugin {
  getBasePath() {
    let basePath;
    if (this.app.vault.adapter instanceof import_obsidian.FileSystemAdapter) {
      basePath = this.app.vault.adapter.getBasePath();
    } else {
      throw new Error("Cannot determine base path.");
    }
    return `${basePath}`;
  }
  async onload() {
    await this.loadSettings();
    var basePath = this.getBasePath();
    var defaultRelativePath = path.join(".", this.app.vault.configDir, "scripts", "python");
    this.pythonDirectory = path.join(basePath, defaultRelativePath);
    this.pythonDirectoryRelative = defaultRelativePath;
    if (this.settings.pythonPath != "") {
      this.pythonDirectory = path.join(basePath, this.settings.pythonPath);
      this.pythonDirectoryRelative = this.settings.pythonPath;
    } else {
      this.pythonDirectory = path.join(basePath, defaultRelativePath);
      this.pythonDirectoryRelative = defaultRelativePath;
    }
    try {
      await this.app.vault.createFolder(this.pythonDirectoryRelative);
    } catch (error) {
    }
    var files = fs.readdirSync(this.pythonDirectory);
    for (var index = 0; index < files.length; index++) {
      const filePath = path.join(this.pythonDirectory, files[index]);
      const fileName = files[index];
      const basePath2 = this.getBasePath();
      const obsidianCommand = {
        id: "run-" + files[index],
        name: "Run " + files[index],
        callback: () => {
          fs.stat(filePath, (err, stats) => {
            var _a, _b;
            if (err) {
              console.error(err);
              return;
            }
            let python_exe = "";
            if (this.settings.pythonExe != "") {
              python_exe = this.settings.pythonExe;
            } else {
              python_exe = "python";
            }
            if (fileName in this.settings.pythonIndividualExes) {
              python_exe = this.settings.pythonIndividualExes[fileName];
              if (!fs.existsSync(this.settings.pythonIndividualExes[fileName])) {
                new import_obsidian.Notice(`Python Exe: ${this.settings.pythonIndividualExes[fileName]} for ${fileName} does not exist`);
                console.log(`Python Exe: ${this.settings.pythonIndividualExes[fileName]} for ${fileName} does not exist`);
                return;
              }
            }
            console.log(`Python Exe: ${python_exe}`);
            let main_file = "";
            if (stats.isFile()) {
              main_file = filePath;
            } else if (stats.isDirectory()) {
              main_file = path.join(filePath, "src", "main.py");
            } else {
              new import_obsidian.Notice(`Error: ${filePath} is not a file or directory`);
              console.log(`Error: ${filePath} is not a file or directory`);
              return;
            }
            var args = [];
            if (this.settings.passVaultPath[fileName]) {
              args.push(basePath2);
            }
            if (this.settings.passCurrentFile[fileName]) {
              var local_current_file_path = (_b = (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) == null ? void 0 : _b.toString();
              if (!(local_current_file_path === void 0)) {
                args.push(local_current_file_path);
              } else {
                args.push("");
              }
            }
            for (var i = 0; i < this.settings.additionalArgs[fileName].length; i++) {
              args.push(this.settings.additionalArgs[fileName][i]);
            }
            let command = `${python_exe} "${main_file}"`;
            for (var i = 0; i < args.length; i++) {
              command += ` "${args[i]}"`;
            }
            (0, import_child_process.exec)(command, { cwd: this.pythonDirectory }, (error, stdout, stderr) => {
              if (error) {
                new import_obsidian.Notice(`Error executing script ${filePath}: ${error}`);
                console.log(`Error executing script ${filePath}: ${error}`);
                return;
              }
              new import_obsidian.Notice(`Script ` + fileName + ` output:
${stdout}`);
              console.log(`Script ` + fileName + ` output:
${stdout}`);
            });
          });
        }
      };
      this.addCommand(obsidianCommand);
    }
    this.addSettingTab(new PythonScripterSettingTab(this.app, this, files));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var PythonScripterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin, files) {
    super(app, plugin);
    this.plugin = plugin;
    this.files = files;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.containerEl.createEl("h1", { text: `Default Behavior` });
    new import_obsidian.Setting(containerEl).setName("Python Script Path").setDesc("Defaults to .obsidian\\scripts\\python").addText((text) => text.setPlaceholder("Enter path").setValue(this.plugin.settings.pythonPath).onChange(async (value) => {
      this.plugin.settings.pythonPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Python Executable").setDesc("Defaults to python").addText((text) => text.setPlaceholder("Enter path or command").setValue(this.plugin.settings.pythonExe).onChange(async (value) => {
      this.plugin.settings.pythonExe = value;
      await this.plugin.saveSettings();
    }));
    this.containerEl.createEl("h1", { text: `Scripts` });
    for (var index = 0; index < this.files.length; index++) {
      let file = this.files[index];
      if (!(file in this.plugin.settings.passVaultPath)) {
        this.plugin.settings.passVaultPath[file] = true;
      }
      if (!(file in this.plugin.settings.passCurrentFile)) {
        this.plugin.settings.passCurrentFile[file] = true;
      }
      this.containerEl.createEl("h2", { text: `${file}` });
      new import_obsidian.Setting(containerEl).setName(`${file} Python Executable`).setDesc(`Overides the default python executable for ${file}`).addTextArea((area) => {
        area.setValue(this.plugin.settings.pythonIndividualExes[file]).onChange(async (value) => {
          this.plugin.settings.pythonIndividualExes[file] = value;
          await this.plugin.saveSettings();
        });
      });
      new import_obsidian.Setting(containerEl).setName(`Pass Vault Path`).setDesc(`Whether to pass the vault path to ${file}`).addToggle((area) => {
        area.setValue(this.plugin.settings.passVaultPath[file]).onChange(async (value) => {
          this.plugin.settings.passVaultPath[file] = value;
          await this.plugin.saveSettings();
          this.display();
        });
      });
      new import_obsidian.Setting(containerEl).setName(`Pass Active File Path`).setDesc(`Whether to pass the active file path to  to ${file}`).addToggle((area) => {
        area.setValue(this.plugin.settings.passCurrentFile[file]).onChange(async (value) => {
          this.plugin.settings.passCurrentFile[file] = value;
          await this.plugin.saveSettings();
          this.display();
        });
      });
      this.containerEl.createEl("h3", { text: `Arguments` });
      new import_obsidian.Setting(containerEl).setName(`Add Argument`).setDesc(``).addButton((area) => {
        area.onClick(async (value) => {
          this.plugin.settings.additionalArgs[file].push("");
          await this.plugin.saveSettings();
          this.display();
        }).setIcon("plus");
      });
      new import_obsidian.Setting(containerEl).setName(`Remove Argument`).setDesc(``).addButton((area) => {
        area.onClick(async (value) => {
          this.plugin.settings.additionalArgs[file].pop();
          await this.plugin.saveSettings();
          this.display();
        }).setIcon("minus");
      });
      if (!(file in this.plugin.settings.additionalArgs)) {
        this.plugin.settings.additionalArgs[file] = [];
      }
      if (this.plugin.settings.passVaultPath[file] && this.plugin.settings.passCurrentFile[file]) {
        new import_obsidian.Setting(containerEl).setName(`Arg 1`).addText((area) => {
          area.setValue("[vault path]").setPlaceholder("[vault path]").setDisabled(true);
        });
        new import_obsidian.Setting(containerEl).setName(`Arg 2`).addText((area) => {
          area.setValue("[active file]").setPlaceholder("[active file]").setDisabled(true);
        });
        for (var i = 0; i < this.plugin.settings.additionalArgs[file].length; i++) {
          new import_obsidian.Setting(containerEl).setName(`Arg ${i + 3}`).addText((area) => {
            area.setPlaceholder("Enter argument").setValue(this.plugin.settings.additionalArgs[file][i]).onChange(async (value) => {
              this.plugin.settings.additionalArgs[file][i] = value;
              await this.plugin.saveSettings();
            });
          });
        }
      } else if (this.plugin.settings.passVaultPath[file] && !this.plugin.settings.passCurrentFile[file]) {
        new import_obsidian.Setting(containerEl).setName(`Arg 1`).addText((area) => {
          area.setValue("[vault path]").setPlaceholder("[vault path]").setDisabled(true);
        });
        for (var i = 0; i < this.plugin.settings.additionalArgs[file].length; i++) {
          new import_obsidian.Setting(containerEl).setName(`Arg ${i + 2}`).addText((area) => {
            area.setPlaceholder("Enter argument").setValue(this.plugin.settings.additionalArgs[file][i]).onChange(async (value) => {
              this.plugin.settings.additionalArgs[file][i] = value;
              await this.plugin.saveSettings();
            });
          });
        }
      } else if (!this.plugin.settings.passVaultPath[file] && this.plugin.settings.passCurrentFile[file]) {
        new import_obsidian.Setting(containerEl).setName(`Arg 1`).addText((area) => {
          area.setValue("[active file]").setPlaceholder("[active file]").setDisabled(true);
        });
        for (var i = 0; i < this.plugin.settings.additionalArgs[file].length; i++) {
          new import_obsidian.Setting(containerEl).setName(`Arg ${i + 2}`).addText((area) => {
            area.setPlaceholder("Enter argument").setValue(this.plugin.settings.additionalArgs[file][i]).onChange(async (value) => {
              this.plugin.settings.additionalArgs[file][i] = value;
              await this.plugin.saveSettings();
            });
          });
        }
      } else {
        for (var i = 0; i < this.plugin.settings.additionalArgs[file].length; i++) {
          new import_obsidian.Setting(containerEl).setName(`Arg ${i + 1}`).addText((area) => {
            area.setPlaceholder("Enter argument").setValue(this.plugin.settings.additionalArgs[file][i]).onChange(async (value) => {
              this.plugin.settings.additionalArgs[file][i] = value;
              await this.plugin.saveSettings();
            });
          });
        }
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
